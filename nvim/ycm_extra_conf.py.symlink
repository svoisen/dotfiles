import os
import subprocess
import re

FRAMEWORK_DIRS = [
]

PROJECT_DIRS = [
    '/Users/svoisen/src/sparkler-shell/third_party/v8/include',
    '/Users/svoisen/src/sparkler-shell/third_party/v8/lib',
    '/Users/svoisen/src/sparkler-shell/third_party/skia/include',
    '/Users/svoisen/src/sparkler-shell/third_party/skia/lib',
    '/Users/svoisen/src/sparkler-shell/Sparkler/Sparkler/core',
    '/Users/svoisen/src/sparkler-shell/Sparkler/Sparkler/osx'
]

BASE_FLAGS = [
    '-Wall',
    '-Wextra',
    '-Werror',
    '-Wno-unknown-pragmas',
    '-Wformat-security'
    '-fexceptions',
    '-fdeprecated-macro',
    '-resource-dir=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.3.0'
]

EXTRA_C_FLAGS = [
    '-std=gnu99'
]

EXTRA_CPP_FLAGS = [
    '-std=gnu++11',
    '-stdlib=libc++',
    '-fcxx-exceptions'
]

EXTRA_OBJC_FLAGS = [
    '-Wdeprecated-objc-isa-usage',
    '-Werror=deprecated-objc-isa-usage',
    '-fblocks',
    '-fobjc-runtime=macosx-10.11.0',
    '-fobjc-arc',
    '-fencode-extended-block-signature',
    '-fobjc-exceptions'
]

EXTRA_OBJCPP_FLAGS = EXTRA_OBJC_FLAGS + EXTRA_CPP_FLAGS

def LoadSystemIncludes( filetype ):
    regex = re.compile(ur'(?:\#include \<...\> search starts here\:)(?P<list>.*?)(?:End of search list)', re.DOTALL)
    process = subprocess.Popen(['clang', '-v', '-E', '-x', filetype, '-'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    process_out, process_err = process.communicate('')
    output = process_out + process_err
    includes = []
    for p in re.search(regex, output).group('list').split('\n'):
        p = p.strip()
        if len(p) > 0 and p.find('(framework directory)') < 0:
            includes.append('-isystem')
            includes.append(p)
    return includes

def LoadProjectIncludes( root_dir ):
    includes = []
    for root, dirs, files in os.walk( root_dir ):
        includes.append( '-I' + root )
    return includes

def LoadFrameworkIncludes( root_dir ):
    includes = []
    for root, dirs, files in os.walk( root_dir ):
        includes.append( '-F' + root )
    return includes

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )

def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags

def FlagsForFile( filename, **kwargs ):
    data = kwargs['client_data']
    filetype = data['&filetype']

    if filetype == 'c':
        language = 'c'
        extra_flags = EXTRA_C_FLAGS

    elif filetype == 'cpp':
        language = 'c++'
        extra_flags = EXTRA_CPP_FLAGS

    elif filetype == 'objc':
        language = 'objective-c'
        extra_flags = EXTRA_OBJC_FLAGS

    elif filetype == 'objcpp':
        language = 'objective-c++'
        extra_flags = EXTRA_OBJCPP_FLAGS

    flags = BASE_FLAGS + extra_flags + ['-x', language] + LoadSystemIncludes(language)

    for root_dir in ( FRAMEWORK_DIRS ):
        flags += LoadFrameworkIncludes( root_dir )

    for root_dir in ( PROJECT_DIRS ):
        flags += LoadProjectIncludes( root_dir )

    final_flags = MakeRelativePathsInFlagsAbsolute( flags, DirectoryOfThisScript() )

    return {
        'flags':    final_flags,
        'do_cache': True
    }
