" -----------------------------------------------------------------------------
" Common settings
" -----------------------------------------------------------------------------
set nocompatible

" Enable true color support
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" Too long of an update leads to poor experience
set updatetime=300

" Always use the system clipboard
set clipboard=unnamed

" Show the column at 80 characters
set colorcolumn=80

" Use number column as sign column
set signcolumn=number

" Highlight the cursor line
set cursorline

" Turn on line numbers
set number

" Enable the mouse
set mouse=a
set ttymouse=xterm2

" Indenting options
set tabstop=4
set expandtab
set autoindent
set smartindent
set shiftwidth=4
set shiftround
set smarttab

" Show matching parens
set showmatch

" Make tab bar always visible
set showtabline=2

" Show status line
set laststatus=2

" Search options
set ignorecase
set smartcase
set grepprg=rg\ --vimgrep\ --smart-case\ --follow

" Backup options
set nobackup
set nowritebackup
set noswapfile

" Always do global replace
set gdefault

" Whitespace characters
set listchars=eol:$,trail:~,extends:>,precedes:<

" Always split new windows below
set splitbelow

" Needed for yats
set re=0

" Always save all the things
au BufUnload,BufLeave,QuitPre * silent! wall

" -----------------------------------------------------------------------------
" Plugins
" -----------------------------------------------------------------------------
" autoload Plug if needed
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Setup plugins using Plug
call plug#begin(expand('~/.vim/bundle'))
Plug 'morhetz/gruvbox'
Plug 'christoomey/vim-tmux-navigator'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'pangloss/vim-javascript'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'edkolev/tmuxline.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'antoinemadec/coc-fzf'
Plug 'mattn/emmet-vim'
Plug 'junegunn/goyo.vim'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'easymotion/vim-easymotion'
Plug 'itchyny/lightline.vim'
Plug 'shinchu/lightline-gruvbox.vim'
Plug 'tpope/vim-fireplace'
call plug#end()

" -----------------------------------------------------------------------------
" colorscheme
" -----------------------------------------------------------------------------
autocmd vimenter * ++nested colorscheme gruvbox
set background=dark

" -----------------------------------------------------------------------------
" coc
" -----------------------------------------------------------------------------
" Setup coc extensions
let g:coc_global_extensions = ['coc-tsserver', 'coc-css', 'coc-html', 
    \'coc-clangd', 'coc-json', 'coc-tslint', 'coc-prettier', 'coc-snippets', 'coc-rls']

" Disable in markdown files
autocmd FileType markdown let b:coc_suggest_disable = 1

" Use tab for trigger completion with characters ahead and navigate
inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#pum#next(1) :
    \ check_backspace() ? "\<TAB>" :
    \ coc#refresh()
inoremap <expr> <S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> auto-select the first completion item and notify coc.nvim to format on enter
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#pum#confirm() 
    \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<cr>"

function! s:check_backspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Use <c-space> to trigger completion
inoremap <silent><expr> <c-@> coc#refresh()

" Symbol renaming using coc
nmap <leader>rn <Plug>(coc-rename)

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Coc FZF integration mappings
nnoremap <silent> <space>L :<C-u>CocFzfList<CR>
nnoremap <silent> <space>a :<C-u>CocFzfList diagnostics<CR>
nnoremap <silent> <space>d :<C-u>CocFzfList diagnostics --current-buf<CR>
nnoremap <silent> <space>c :<C-u>CocFzfList commands<CR>
nnoremap <silent> <space>e :<C-u>CocFzfList extensions<CR>
nnoremap <silent> <space>l :<C-u>CocFzfList location<CR>
nnoremap <silent> <space>o :<C-u>CocFzfList outline<CR>
nnoremap <silent> <space>s :<C-u>CocFzfList symbols<CR>
nnoremap <silent> <space>p :<C-u>CocFzfListResume<CR>

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!' . &keywordprg . " " .
    expand('<cword>')
    endif
endfunction

" Create :Prettier command and autorun on save of TypeScript files
command! -nargs=0 Prettier :CocCommand prettier.formatFile
autocmd BufWritePre *.ts Prettier

" -----------------------------------------------------------------------------
" coc-snippets
" -----------------------------------------------------------------------------
nnoremap <leader>se :CocCommand snippets.editSnippets<CR>

" Use <C-j> to select text for visual placeholder of snippet
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> to jump to next placeholder
let g:coc_snippet_next = '<c-j>'

" Use <C-k> to jump to previous placeholder
let g:coc_snippet_prev = '<c-k>'

" -----------------------------------------------------------------------------
" lightline
" -----------------------------------------------------------------------------
let g:lightline = { 'colorscheme': 'gruvbox' }

" -----------------------------------------------------------------------------
" tmuxline
" ----------------------------------------------------------------------------
let g:tmuxline_powerline_separators = 0
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'b'    : '#W',
      \'win'  : '#I #W',
      \'cwin' : '#I #W',
      \'x'    : '%a',
      \'y'    : '%R',
      \'z'    : '#{battery_percentage} #{battery_remain}'}

" -----------------------------------------------------------------------------
" fzf
" -----------------------------------------------------------------------------
" Disable popup and layout window at bottom (faster)
" let g:fzf_layout = { 'down': '40%' }

set rtp+=/usr/local/opt/fzf

nnoremap <silent> <space><space>  :Files<CR>
nnoremap <silent> <leader><space> :Files<CR>
nnoremap <silent> <leader>a       :Buffers<CR>
nnoremap <silent> <leader>A       :Windows<CR>
nnoremap <silent> <leader>;       :BLines<CR>
nnoremap <silent> <leader>o       :BTags<CR>
nnoremap <silent> <leader>O       :Tags<CR>
nnoremap <silent> <leader>?       :History<CR>
nnoremap <silent> <leader>gl      :Commits<CR>
nnoremap <silent> <leader>ga      :BCommits<CR>
nnoremap <silent> <leader>/ :execute 'Rg ' . input('Search: ')<CR>
nnoremap <silent> <leader>. :Rg<CR>

" -----------------------------------------------------------------------------
" git and fugitive
" -----------------------------------------------------------------------------
nnoremap <silent> <leader>gd :Gvdiffsplit!<CR>
nnoremap <silent> <leader>gdh :diffget //2<CR>
nnoremap <silent> <leader>gdl :diffget //3<CR>
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gb :Gblame<CR>

" -----------------------------------------------------------------------------
" NERDTree
" -----------------------------------------------------------------------------
let NERDTreeMinimalUI = 1
let NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

" Open a NERDTree if no file is given as CLI argument
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Close if the only remaining window is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Toggle NERDTree
nmap <silent> <leader>t :NERDTreeToggle<CR>

" -----------------------------------------------------------------------------
" Emmet
" -----------------------------------------------------------------------------
" Enable Emmet only for HTML and CSS
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" -----------------------------------------------------------------------------
" Abbreviations
" -----------------------------------------------------------------------------
" Fix common spelling mistakes
abbr teh the
abbr widht width
abbr rigth right
abbr heiht height

" -----------------------------------------------------------------------------
" Moving around
" -----------------------------------------------------------------------------
" Easier pane movement
set winminheight=0
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l
nmap <C-=> <C-w>=

" Jump up/down one line no matter if lines are wrapped
nnoremap j gj
nnoremap k gk

" Maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

" Move visual block down
vnoremap J :m '>+1<CR>gv=gv

" Move visual block up
vnoremap K :m '<-2<CR>gv=gv

" Switch between tabs
nmap <leader>1 1gt
nmap <leader>2 2gt
nmap <leader>3 3gt
nmap <leader>4 4gt
nmap <leader>5 5gt
nmap <leader>6 6gt
nmap <leader>7 7gt
nmap <leader>8 8gt
nmap <leader>9 9gt

" -----------------------------------------------------------------------------
" Function key mappings
" -----------------------------------------------------------------------------
" F1 mapped to help, don't override it

" Toggle line numbers
noremap! <silent> <F2> <Esc>:setlocal number!<CR>
nnoremap <silent> <F2> :setlocal number!<CR>

" Toggle highlight of search terms
noremap! <silent> <F3> <Esc>:call ToggleHLSearch()<CR>
nnoremap <silent> <F3> :call ToggleHLSearch()<CR>

function! ToggleHLSearch()
    if &hls
        set nohls
    else
        set hls
    endif
endfunction

" Toggle spell check
noremap! <silent> <F4> <Esc>:set spell!<CR>
nnoremap <silent> <F4> :set spell!<CR>

" Toggle whitespace visibility
noremap! <silent> <F5> <Esc>:set list!<CR>
nnoremap <silent> <F5> :set list!<CR>

" Toggle paste mode
noremap! <silent> <F6> <Esc>:set paste!<CR>
nnoremap <silent> <F6> :set paste!<CR>

" -----------------------------------------------------------------------------
" Text formatting
" -----------------------------------------------------------------------------
" Strip trailing whitespace
nnoremap <leader><BS>s :%s/\s\+$//<cr>:let @/=''<CR>

" Re-hardwrap paragraphs
autocmd FileType markdown nnoremap <leader>p gqip

" -----------------------------------------------------------------------------
" Miscellaneous leader mappings
" -----------------------------------------------------------------------------
" Open split with new buffer in all directions
nnoremap <Leader>hn :leftabove  vnew<CR>
nnoremap <Leader>ln :rightbelow vnew<CR>
nnoremap <Leader>kn :leftabove  new<CR>
nnoremap <Leader>jn :rightbelow new<CR>

" If split in given direction exists - jump, else create new split
function! JumpOrOpenNewSplit(key, cmd, fzf) " {{{
  let current_window = winnr()
  execute 'wincmd' a:key
  if current_window == winnr()
    execute a:cmd
    if a:fzf
      Files
    endif
  else
    if a:fzf
      Files
    endif
  endif
endfunction

nnoremap <silent> <Leader>hh :call JumpOrOpenNewSplit('h', ':leftabove vsplit', 0)<CR>
nnoremap <silent> <Leader>ll :call JumpOrOpenNewSplit('l', ':rightbelow vsplit', 0)<CR>
nnoremap <silent> <Leader>kk :call JumpOrOpenNewSplit('k', ':leftabove split', 0)<CR>
nnoremap <silent> <Leader>jj :call JumpOrOpenNewSplit('j', ':rightbelow split', 0)<CR>

" Same as above, except it opens fzf 
nnoremap <silent> <Leader>h<Space> :call JumpOrOpenNewSplit('h', ':leftabove vsplit', 1)<CR>
nnoremap <silent> <Leader>l<Space> :call JumpOrOpenNewSplit('l', ':rightbelow vsplit', 1)<CR>
nnoremap <silent> <Leader>k<Space> :call JumpOrOpenNewSplit('k', ':leftabove split', 1)<CR>
nnoremap <silent> <Leader>j<Space> :call JumpOrOpenNewSplit('j', ':rightbelow split', 1)<CR>

" Open an edit command with the path of the current file
nnoremap <leader>ee :e <C-R>=expand("%:p:h") . "/"<CR>

" Open a tab edit command with the path of the current file
nnoremap <leader>te :tabe <C-R>=expand("%:p:h") . "/"<CR>

" Source vim configuration file and install plugins
nnoremap <leader>vsi :source ~/.vimrc \| :PlugInstall<CR>
nnoremap <leader>vs :source ~/.vimrc<CR>
nnoremap <leader>ve :tabedit $MYVIMRC<CR>

" Quick way to save file
nnoremap <leader>w :w<CR>
